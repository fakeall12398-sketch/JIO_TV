name: 🔄 Auto Update IPTV Tokens & License Keys

on:
  schedule:
    - cron: "0 */11 * * *"  # Every 11 hours
  workflow_dispatch:  # Manual trigger allowed

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🧩 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: 🔄 Fetch & Update kids.m3u
        run: |
          python - <<'PYCODE'
          import re, requests, time

          M3U_FILE = "kids.m3u"

          PLAYLIST_URLS = [
              "https://fakeall12398-sketch.github.io/JIO_TV/jstar.m3u",
              "https://fakeall12398-sketch.github.io/JIO_TV/sony.m3u",
              "https://freelivtv.xyz/oppu/opplex.m3u",
              "https://fakeall12398-sketch.github.io/JIO_TV/Allinone.m3u8"
          ]

          def fetch_tokens():
              tokens = {"hdnea": None, "hdntl": None, "license_key": None}
              pattern_hdnea = re.compile(r"__hdnea__=([^&\"\\s]+)")
              pattern_hdntl = re.compile(r"hdntl=([^&\"\\s]+)")
              pattern_license = re.compile(r"#KODIPROP:inputstream\.adaptive\.license_key=([^\n]+)")

              for url in PLAYLIST_URLS:
                  try:
                      print(f"[INFO] Fetching: {url}")
                      resp = requests.get(url, timeout=20)
                      text = resp.text

                      if not tokens["hdnea"]:
                          m = pattern_hdnea.search(text)
                          if m:
                              tokens["hdnea"] = m.group(1)
                              print(f"✅ Found hdnea: {tokens['hdnea'][:40]}...")

                      if not tokens["hdntl"]:
                          m = pattern_hdntl.search(text)
                          if m:
                              tokens["hdntl"] = m.group(1)
                              print(f"✅ Found hdntl: {tokens['hdntl'][:40]}...")

                      if not tokens["license_key"]:
                          m = pattern_license.search(text)
                          if m:
                              tokens["license_key"] = m.group(1).strip()
                              print(f"✅ Found license key")

                      if all(tokens.values()):
                          print("[INFO] All tokens collected ✅")
                          break
                  except Exception as e:
                      print(f"[WARN] Skipping {url}: {e}")

              print(f"[INFO] Final tokens: {tokens}")
              return tokens

          def update_file(tokens):
              try:
                  with open(M3U_FILE, encoding="utf-8") as f:
                      content = f.read()
              except FileNotFoundError:
                  print(f"[ERROR] File {M3U_FILE} not found.")
                  return False

              updated = content

              if tokens["hdnea"]:
                  updated = re.sub(r"__hdnea__=[^&\"\\s]+", f"__hdnea__={tokens['hdnea']}", updated)
                  updated = re.sub(r'cookie=\"__hdnea__=[^\"}]+', f'cookie="__hdnea__={tokens["hdnea"]}', updated)

              if tokens["hdntl"]:
                  updated = re.sub(r"hdntl=[^&\"\\s]+", f"hdntl={tokens['hdntl']}", updated)

              if tokens["license_key"]:
                  updated = re.sub(
                      r"(?m)^#KODIPROP:inputstream\.adaptive\.license_key=.*$",
                      f"#KODIPROP:inputstream.adaptive.license_key={tokens['license_key']}",
                      updated
                  )

              # Add timestamp to force commit
              timestamp = time.strftime("%Y-%m-%d %H:%M:%S UTC")
              updated += f"\n# Auto-updated on {timestamp}\n"

              with open(M3U_FILE, "w", encoding="utf-8") as f:
                  f.write(updated)

              print(f"[INFO] ✅ {M3U_FILE} updated successfully.")
              return True

          tokens = fetch_tokens()
          if not any(tokens.values()):
              print("[ERROR] No tokens found. Skipping update.")
              exit(1)

          update_file(tokens)
          PYCODE

      - name: 💾 Commit & Push Updated Tokens
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          DATE="$(date -u +'%Y-%m-%d %H:%M:%S UTC')"

          git add kids.m3u
          git commit -m "🔄 Auto Update kids.m3u tokens [${DATE}]" || echo "⚠️ No diff detected, forcing commit."
          git push origin HEAD:main || echo "⚠️ Push failed — likely no diff."
