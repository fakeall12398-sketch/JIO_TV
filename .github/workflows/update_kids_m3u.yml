name: 🔄 Auto Update IPTV Tokens & License Keys

on:
  schedule:
    - cron: "0 */11 * * *"  # every 11 hours
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 🧩 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: 🔄 Fetch and Update Tokens in kids.m3u
        run: |
          python - <<'PYCODE'
          import re, requests

          M3U_FILE = "kids.m3u"
          PLAYLIST_URLS = [
              "https://fakeall12398-sketch.github.io/JIO_TV/jstar.m3u",
              "https://fakeall12398-sketch.github.io/JIO_TV/sony.m3u",
              "https://freelivtv.xyz/oppu/opplex.m3u",
              "https://fakeall12398-sketch.github.io/JIO_TV/Allinone.m3u"
          ]

          # Regex patterns to extract tokens & license keys
          pattern_hdnea = re.compile(r"__hdnea__=st=[^~]+~exp=[^~]+~acl=[^~]+~hmac=[a-f0-9]+")
          pattern_hdntl = re.compile(r"hdntl=[^&\"\\s]+")
          pattern_license = re.compile(r"#KODIPROP:inputstream\.adaptive\.license_key=([^\n]+)")

          def fetch_tokens():
              tokens = {"hdnea": None, "hdntl": None, "license_key": None}
              for url in PLAYLIST_URLS:
                  try:
                      print(f"[INFO] Fetching from {url}")
                      r = requests.get(url, timeout=15)
                      text = r.text
                      if not tokens["hdnea"]:
                          m = pattern_hdnea.search(text)
                          if m: tokens["hdnea"] = m.group(0).split("=")[1]
                      if not tokens["hdntl"]:
                          m = pattern_hdntl.search(text)
                          if m: tokens["hdntl"] = m.group(0).split("=")[1]
                      if not tokens["license_key"]:
                          m = pattern_license.search(text)
                          if m: tokens["license_key"] = m.group(1).strip()
                      if all(tokens.values()):
                          break
                  except Exception as e:
                      print(f"[WARN] Failed to fetch {url}: {e}")
              return tokens

          def update_file(tokens):
              try:
                  with open(M3U_FILE, encoding="utf-8") as f:
                      content = f.read()
              except FileNotFoundError:
                  print(f"[ERROR] {M3U_FILE} not found!")
                  return False

              updated = content

              # Replace __hdnea__ tokens everywhere
              if tokens["hdnea"]:
                  updated = re.sub(
                      r"__hdnea__=st=[^~]+~exp=[^~]+~acl=[^~]+~hmac=[a-f0-9]+",
                      f"__hdnea__={tokens['hdnea']}",
                      updated
                  )
                  updated = re.sub(
                      r'cookie="__hdnea__=[^"\\}]+',
                      f'cookie="__hdnea__={tokens["hdnea"]}',
                      updated
                  )
                  updated = re.sub(
                      r'\|\|cookie=__hdnea__=[^\\s]+',
                      f'||cookie=__hdnea__={tokens["hdnea"]}',
                      updated
                  )

              # Replace hdntl tokens if any
              if tokens["hdntl"]:
                  updated = re.sub(r"hdntl=[^&\"\\s]+", f"hdntl={tokens['hdntl']}", updated)

              # Replace license key if new one found
              if tokens["license_key"]:
                  updated = re.sub(
                      r"(#KODIPROP:inputstream\.adaptive\.license_key=)[^\n]+",
                      f"\\1{tokens['license_key']}",
                      updated
                  )

              if updated != content:
                  with open(M3U_FILE, "w", encoding="utf-8") as f:
                      f.write(updated)
                  print("[INFO] kids.m3u updated successfully ✅")
                  return True
              else:
                  print("[INFO] Tokens matched — forced update anyway ✅")
                  with open(M3U_FILE, "w", encoding="utf-8") as f:
                      f.write(updated)
                  return True

          tokens = fetch_tokens()
          if not any(tokens.values()):
              print("[ERROR] No tokens found from any playlist.")
              exit(1)
          update_file(tokens)
          PYCODE

      - name: 💾 Commit & Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add kids.m3u
          git commit -m "🔄 Auto Update Tokens & License [$(date '+%Y-%m-%d %H:%M:%S')]" || echo "No changes."
          git push || echo "No push needed."
