name: Auto Update Sony M3U Tokens
permissions:
  contents: write

on:
  schedule:
    - cron: '0 */11 * * *'  # every 11 hours
  workflow_dispatch:

jobs:
  update-sony:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Update sony.m3u tokens
        run: |
          python - <<'PY'
          import re, subprocess, os
          from datetime import datetime

          API_URL = "https://livetv-cb7.pages.dev/Slivplaylist"
          LOCAL_FILE = "sony.m3u"

          def fetch_playlist():
              print("🔄 Fetching latest playlist (via curl)...")
              try:
                  result = subprocess.run([
                      "curl", "-sL", API_URL,
                      "-H", "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
                      "-H", "Accept: */*",
                      "-H", "Referer: https://livetv-cb7.pages.dev/"
                  ], capture_output=True, text=True, timeout=30)
                  data = result.stdout.strip()
                  print(f"✅ Fetch status: {result.returncode}, bytes: {len(data)}")
                  print("🔍 Preview:", data.splitlines()[:5])
                  return data
              except Exception as e:
                  print(f"❌ Error fetching playlist: {e}")
                  return ""

          def parse_m3u(content):
              entries = []
              lines = content.splitlines()
              for i, line in enumerate(lines):
                  if line.startswith("#EXTINF"):
                      header = line.strip()
                      if i + 1 < len(lines):
                          url = lines[i + 1].strip()
                          tvg_id = re.search(r'tvg-id="([^"]+)"', header)
                          tvg_name = re.search(r'tvg-name="([^"]+)"', header)
                          group_title = re.search(r'group-title="([^"]+)"', header)
                          raw_name = tvg_name.group(1) if tvg_name else ""
                          norm_name = raw_name.lower().replace(" ", "").replace("-", "").replace("_", "")
                          entries.append({
                              "id": (tvg_id.group(1).lower() if tvg_id else ""),
                              "name": norm_name,
                              "raw_name": raw_name,
                              "group": (group_title.group(1).lower() if group_title else ""),
                              "header": header,
                              "url": url
                          })
              return entries

          playlist_data = fetch_playlist()
          if not playlist_data:
              print("⚠️ No playlist data fetched — skipping update.")
              exit(0)

          new_entries = parse_m3u(playlist_data)

          sony_new = [
              e for e in new_entries
              if "sony" in e["id"].lower()
              or "sony" in e["name"].lower()
              or "sony" in e["header"].lower()
              or "sonyliv" in e["group"].lower()
          ]

          print(f"✅ Found {len(sony_new)} Sony-related channels.")

          if not sony_new:
              print("⚠️ No Sony-related channels found — skipping.")
              exit(0)

          # Always rebuild the file completely
          lines = [
              "#EXTM3U",
              f"# Updated: {datetime.utcnow().isoformat()} UTC",
              "",
          ]
          for e in sony_new:
              lines.append(e["header"])
              lines.append(e["url"])

          with open(LOCAL_FILE, "w", encoding="utf-8") as f:
              f.write("\n".join(lines).strip() + "\n")

          print(f"🎉 sony.m3u rewritten with {len(sony_new)} entries.")
          PY

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add sony.m3u
          git diff --staged --quiet && echo "✅ No changes detected, forcing metadata update" && \
            echo "# Updated $(date -u)" >> sony.m3u && git add sony.m3u

          git commit -m "🔄 Auto-update Sony M3U ($(date -u)) [skip ci] [skip actions]" || echo "No commit needed"
          git push origin HEAD:${{ github.ref }} || echo "✅ Push skipped (no diff)"
