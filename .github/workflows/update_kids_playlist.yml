name: Auto Update Kids Playlist

on:
  schedule:
    - cron: "0 */11 * * *"  # every 11 hours
  workflow_dispatch:

jobs:
  update-kids:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      - name: Extract Kids Channels
        run: |
          python <<'PY'
          import re, requests
          from datetime import datetime, timedelta

          PLAYLIST_URLS = [
              "https://fakeall12398-sketch.github.io/JIO_TV/jstar.m3u",
              "https://fakeall12398-sketch.github.io/JIO_TV/sony.m3u",
              "https://freelivtv.xyz/oppu/opplex.m3u",
              "https://fakeall12398-sketch.github.io/JIO_TV/Allinone.m3u8"
          ]

          OUTPUT_FILE = "kids.m3u"
          TIMEOUT = 15

          WHITELIST_CHANNELS = [
              "Disney Channel", "Disney Junior", "Nickelodeon", "Nick Jr",
              "Sonic", "Hungama", "Super Hungama", "Sony Yay", "Pogo", "Cartoon Network"
          ]

          TOKEN_PATTERN = re.compile(r"__hdnea__=[^&\\s]+")

          def fetch_text(url):
              try:
                  headers = {"User-Agent": "Mozilla/5.0 (KidsExtractor)"}
                  r = requests.get(url, timeout=TIMEOUT, headers=headers)
                  r.raise_for_status()
                  return r.text
              except Exception as e:
                  print(f"[WARN] Failed to fetch {url}: {e}")
                  return ""

          def refresh_token(old_token):
              new_exp = int((datetime.utcnow() + timedelta(hours=11)).timestamp())
              return re.sub(r"exp=\\d+", f"exp={new_exp}", old_token)

          def extract_blocks(content):
              lines = content.splitlines()
              blocks, current = [], []
              for line in lines:
                  if line.startswith("#EXTINF"):
                      if current:
                          blocks.append("\\n".join(current))
                      current = [line]
                  else:
                      current.append(line)
              if current:
                  blocks.append("\\n".join(current))
              return blocks

          def is_kids_channel(block):
              text = block.lower()
              return any(name.lower() in text for name in WHITELIST_CHANNELS)

          def fix_tokens(block):
              return TOKEN_PATTERN.sub(lambda m: refresh_token(m.group(0)), block)

          all_blocks = []
          for url in PLAYLIST_URLS:
              print(f"â†’ Fetching {url}")
              text = fetch_text(url)
              if not text:
                  continue
              blocks = extract_blocks(text)
              kids = [fix_tokens(b) for b in blocks if is_kids_channel(b)]
              all_blocks.extend(kids)
              print(f"  Found {len(kids)} kids blocks in {url}")

          unique, seen = [], set()
          for block in all_blocks:
              urls = re.findall(r"https?://[^\\s]+", block)
              if urls:
                  link = urls[-1]
                  if link not in seen:
                      seen.add(link)
                      unique.append(block)

          print(f"âœ… Total unique kids channels: {len(unique)}")

          with open(OUTPUT_FILE, "wb") as f:
              f.write(b'\\xef\\xbb\\xbf')
              f.write(b'#EXTM3U x-tvg-url="https://avkb.short.gy/jioepg.xml.gz"\\r\\n')
              for block in unique:
                  f.write((block.strip() + "\\r\\n\\r\\n").encode("utf-8"))

          print(f"ðŸŽ‰ Saved kids channels with metadata to {OUTPUT_FILE}")
          PY

      - name: Commit and Push
        run: |
          git config --global user.name "KidsBot"
          git config --global user.email "kidsbot@github.com"
          git add kids.m3u
          git commit -m "ðŸ§’ Auto-update kids playlist ($(date))" || echo "No changes"
          git push
